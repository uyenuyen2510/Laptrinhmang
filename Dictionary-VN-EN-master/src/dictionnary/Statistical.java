/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dictionnary;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import javafx.print.Collation;

/**
 *
 * @author nthan
 */
public class Statistical extends javax.swing.JFrame {

    /**
     * Creates new form Statistical
     */
    public Statistical() {
        initComponents();
        for(int i = 1; i <= 31; i++){
            cb_SDay.addItem(String.valueOf(i));
            cb_EDay.addItem(String.valueOf(i));
        }
        for(int i = 1; i<=12; i++){
            cb_Smonth.addItem(String.valueOf(i));
            cb_EMonth.addItem(String.valueOf(i));
        }
        for(int i = 2006; i <= 2050; i++){
            cb_SYear.addItem(String.valueOf(i));
            cb_EYear.addItem(String.valueOf(i));
        }

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Statistical");
        setResizable(false);
        
        //-----------------------------------------------------      

        //-----------------------------------------------------
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cb_SDay = new javax.swing.JComboBox<>();
        cb_Smonth = new javax.swing.JComboBox<>();
        cb_SYear = new javax.swing.JComboBox<>();
        cb_EDay = new javax.swing.JComboBox<>();
        cb_EMonth = new javax.swing.JComboBox<>();
        cb_EYear = new javax.swing.JComboBox<>();
        btn_Statistical = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        text_statistical = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Start Day");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("End Day");

        cb_SDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_SDayActionPerformed(evt);
            }
        });

        cb_Smonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_SmonthActionPerformed(evt);
            }
        });

        cb_SYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_SYearActionPerformed(evt);
            }
        });

        cb_EDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_EDayActionPerformed(evt);
            }
        });

        cb_EMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_EMonthActionPerformed(evt);
            }
        });

        cb_EYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_EYearActionPerformed(evt);
            }
        });

        btn_Statistical.setText("Statistical");
        btn_Statistical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_StatisticalActionPerformed(evt);
            }
        });

        text_statistical.setEditable(false);
        text_statistical.setColumns(20);
        text_statistical.setRows(5);
        jScrollPane2.setViewportView(text_statistical);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cb_SDay, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cb_Smonth, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cb_SYear, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(cb_EDay, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cb_EMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cb_EYear, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(btn_Statistical, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cb_Smonth, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cb_SDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cb_SYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cb_EDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cb_EMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cb_EYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btn_Statistical, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cb_SDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_SDayActionPerformed

    }//GEN-LAST:event_cb_SDayActionPerformed

    private void cb_SmonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_SmonthActionPerformed
       try{
            int Day = Integer.parseInt(cb_SDay.getSelectedItem().toString());
            int Month = Integer.parseInt(cb_Smonth.getSelectedItem().toString());
            int year = Integer.parseInt(cb_SYear.getSelectedItem().toString());
            if(Day < MaxDayOfMonth(Month, year)){
                cb_SDay.removeAllItems();
                SetStartDay();
                cb_SDay.setSelectedItem(String.valueOf(Day));
            }
            if(Day > MaxDayOfMonth(Month, year)){
                cb_SDay.removeAllItems();
                SetStartDay();
            }
           }
           catch(Exception ex)
           {

           }

    }//GEN-LAST:event_cb_SmonthActionPerformed

    private void cb_SYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_SYearActionPerformed
       try{
            int Day = Integer.parseInt(cb_SDay.getSelectedItem().toString());
            int Month = Integer.parseInt(cb_Smonth.getSelectedItem().toString());
            int year = Integer.parseInt(cb_SYear.getSelectedItem().toString());
            if(Day < MaxDayOfMonth(Month, year)){
                cb_SDay.removeAllItems();
                SetStartDay();
                cb_SDay.setSelectedItem(String.valueOf(Day));
            }
            if(Day > MaxDayOfMonth(Month, year)){
                cb_SDay.removeAllItems();
                SetStartDay();
            }
           }
           catch(Exception ex)
           {

           }

    }//GEN-LAST:event_cb_SYearActionPerformed

    private void cb_EDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_EDayActionPerformed
            
    }//GEN-LAST:event_cb_EDayActionPerformed

    private void cb_EMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_EMonthActionPerformed
       try{
            int Day = Integer.parseInt(cb_EDay.getSelectedItem().toString());
            int Month = Integer.parseInt(cb_EMonth.getSelectedItem().toString());
            int year = Integer.parseInt(cb_EYear.getSelectedItem().toString());
            if(Day < MaxDayOfMonth(Month, year)){
                cb_EDay.removeAllItems();
                SetEndDay();
                cb_EDay.setSelectedItem(String.valueOf(Day));
            }
            if(Day > MaxDayOfMonth(Month, year)){
                cb_EDay.removeAllItems();
                SetEndDay();
            }
           }
           catch(Exception ex)
           {

           }
    }//GEN-LAST:event_cb_EMonthActionPerformed

    private void cb_EYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_EYearActionPerformed
       try{
            int Day = Integer.parseInt(cb_EDay.getSelectedItem().toString());
            int Month = Integer.parseInt(cb_EMonth.getSelectedItem().toString());
            int year = Integer.parseInt(cb_EYear.getSelectedItem().toString());
            if(Day < MaxDayOfMonth(Month, year)){
                cb_EDay.removeAllItems();
                SetEndDay();
                cb_EDay.setSelectedItem(String.valueOf(Day));
            }
            if(Day > MaxDayOfMonth(Month, year)){
                cb_EDay.removeAllItems();
                SetEndDay();
            }
           }
           catch(Exception ex)
           {

           }
    }//GEN-LAST:event_cb_EYearActionPerformed

    public int MaxDayOfMonth(int month,int year){
        if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)
            return 31;
        else if(month == 4 || month == 6 || month == 9 || month == 11){
            return 30;
        }
        else if(month == 2){
            if(checkYearLeap(year) == true)
                return 29;
            else return 28;
        }
        return 32;
    }
    private void btn_StatisticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_StatisticalActionPerformed
        int dayB;
        int dayT;
        int monthB;
        int monthT;
        int yearB;
        int yearT;
        dayB = (Integer.parseInt(cb_SDay.getSelectedItem().toString()));
        dayT = (Integer.parseInt(cb_EDay.getSelectedItem().toString()));
        monthB = (Integer.parseInt(cb_Smonth.getSelectedItem().toString()));
        monthT = (Integer.parseInt(cb_EMonth.getSelectedItem().toString()));
        yearB = (Integer.parseInt(cb_SYear.getSelectedItem().toString()));
        yearT = (Integer.parseInt(cb_EYear.getSelectedItem().toString()));
        if(checklogicDatetime(dayB, monthB, yearB, dayT, monthT, yearT) == false){
            text_statistical.setText("Invalid date!!!");
        }
        else{
            text_statistical.setText("");
            if(Dictionnary.Translation == 1){
                List<String> listHistoryEN = new ArrayList<String>();    
                listHistoryEN.clear();
                for(int i = 0; i < ProcessWord.historyEN.size(); i++){
                    if((checklogicDatetime(dayB, monthB, yearB,
                            ProcessWord.historyEN.get(i).getDay(), 
                            ProcessWord.historyEN.get(i).getMonth(),
                            ProcessWord.historyEN.get(i).getYear()) == true) &&
                            (checklogicDatetime(ProcessWord.historyEN.get(i).getDay(),
                                                ProcessWord.historyEN.get(i).getMonth(),
                                                ProcessWord.historyEN.get(i).getYear(),
                                                dayT, monthT, yearT) == true)){   
                            listHistoryEN.add(ProcessWord.historyEN.get(i).getKey());
                        
                        
                    }
                }
                while(listHistoryEN.size() != 0){
                    int count = 1;
                    String temp;
                    temp = listHistoryEN.get(0);
                    for(int i = 1; i < listHistoryEN.size(); i++){
                        if(listHistoryEN.get(i).equals(temp) == true){
                            count++;
                            listHistoryEN.remove(i);
                            i--;
                        }
                    }
                    listHistoryEN.remove(0);
                    text_statistical.append(temp + ":" + count + "(times)" + "\n");
                    text_statistical.append("-----------------------------------------------------\n");
                    
                }
            }
            if(Dictionnary.Translation == 2){
                List<String> listHistoryVN = new ArrayList<String>();    
                for(int i = 0; i < ProcessWord.historyVN.size(); i++){
                    if((checklogicDatetime(dayB, monthB, yearB,
                            ProcessWord.historyVN.get(i).getDay(), 
                            ProcessWord.historyVN.get(i).getMonth(),
                            ProcessWord.historyVN.get(i).getYear()) == true) &&
                            (checklogicDatetime(ProcessWord.historyVN.get(i).getDay(),
                                                ProcessWord.historyVN.get(i).getMonth(),
                                                ProcessWord.historyVN.get(i).getYear(),
                                                dayT, monthT, yearT) == true)){
                        listHistoryVN.add(ProcessWord.historyVN.get(i).getKey());
                    }
                }
                while(listHistoryVN.size() != 0){
                    int count = 1;
                    String temp;
                    temp = listHistoryVN.get(0);
                    for(int i = 1; i < listHistoryVN.size(); i++){
                        if(listHistoryVN.get(i).equals(temp) == true){
                            count++;
                            listHistoryVN.remove(i);
                            i--;
                        }
                    }
                    listHistoryVN.remove(0);
                    text_statistical.append(temp + ":" + count + "(times)" + "\n");
                    text_statistical.append("-----------------------------------------------------\n");
                }
            }
        }
        
    }//GEN-LAST:event_btn_StatisticalActionPerformed
    public boolean checklogicDatetime(int dayB, int monthB, int yearB, int dayT, int monthT, int yearT){
        if(yearT > yearB)
            return true;
        if(yearB == yearT){
            if(monthT > monthB)
                return true;
            if(monthB == monthT){
                if(dayT > dayB)
                    return true;
            }
        }
            
        return false;
    }
    
    // Set Year START
    public void SetStartYear(){
        for(int i = 2000; i <= 2030; i++){
            cb_SYear.addItem(String.valueOf(i));
        }
    }
    // SET Month START 
    public void SetStartMonth(){
        for( int i = 1; i <= 12; i++){
            cb_Smonth.addItem(String.valueOf(i));
        }
    }
    public void SetStartDay(){
        int month = Integer.parseInt((String)cb_Smonth.getSelectedItem());
        if( month == 1 || month == 3 || month == 5 || month == 7 ||month == 8 || month == 10 || month == 12) 
        {
            for(int i = 1; i<= 31; i++){
                cb_SDay.addItem(String.valueOf(i));
            }
        }
        else if(month == 4 || month == 6 || month == 9 || month == 11){
            for(int i = 1; i <= 30; i++){
                cb_SDay.addItem(String.valueOf(i));
            }
        }
        else if(month == 2){
            if(checkYearLeap(Integer.parseInt((String)(cb_SYear.getSelectedItem()))) == true ){
                for(int i = 1; i <= 29; i++){
                   cb_SDay.addItem(String.valueOf(i));
            }
            }
            else{
                 for(int i = 1; i <= 28; i++){
                     cb_SDay.addItem(String.valueOf(i));
                  }
             }
        }
        else{
             for(int i = 1; i<= 31; i++){
                cb_SDay.addItem(String.valueOf(i));
            }
        }
    }
    
    //-------------------------------------------------------------------------------------------------
    
        // Set Year end
    public void SetEndYear(){
        for(int i = 2001; i <= 2030; i++){
            cb_EYear.addItem(String.valueOf(i));
        }
    }
    // SET Month end 
    public void SetENDMonth(){
        for( int i = 2; i <= 12; i++){
            cb_EMonth.addItem(String.valueOf(i));
        }
    }
    
    // Set Year end
    public void SetEndDay(){
        int month = Integer.parseInt((String)cb_EMonth.getSelectedItem());
        if( month == 1 || month == 3 || month == 5 || month == 7 ||month == 8 || month == 10 || month == 12) 
        {
            for(int i = 1; i<= 31; i++){
                cb_EDay.addItem(String.valueOf(i));
            }
        }
        else if(month == 4 || month == 6 || month == 9 || month == 11){
            for(int i = 1; i <= 30; i++){
                cb_EDay.addItem(String.valueOf(i));
            }
        }
        else if(month == 2){
            if(checkYearLeap(Integer.parseInt((String)(cb_EYear.getSelectedItem()))) == true ){
                for(int i = 1; i <= 29; i++){
                   cb_EDay.addItem(String.valueOf(i));
            }
            }
            else{
                 for(int i = 1; i <= 28; i++){
                     cb_EDay.addItem(String.valueOf(i));
                  }
             }
        }
        else{
             for(int i = 2; i<= 31; i++){
                cb_EDay.addItem(String.valueOf(i));
            }}
    }
    

    // CHECK YEAR LEAP
    public boolean checkYearLeap(int Year){
        if(((Year % 4 == 0) && (Year % 100 != 0)) || Year % 400 == 0 )
            return true;
        return false;
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Statistical;
    private javax.swing.JComboBox<String> cb_EDay;
    private javax.swing.JComboBox<String> cb_EMonth;
    private javax.swing.JComboBox<String> cb_EYear;
    private javax.swing.JComboBox<String> cb_SDay;
    private javax.swing.JComboBox<String> cb_SYear;
    private javax.swing.JComboBox<String> cb_Smonth;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea text_statistical;
    // End of variables declaration//GEN-END:variables
}
